/*!
 * Chart.js v4.4.1 - Minimal vendored version for AI Quality Kit
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Chart=e()}(this,(function(){"use strict";
// Minimal Chart.js implementation for doughnut and bar charts
class Chart {
  constructor(ctx, config) {
    this.ctx = ctx;
    this.config = config;
    this.render();
  }
  
  render() {
    const canvas = this.ctx.canvas;
    const ctx = this.ctx;
    const data = this.config.data;
    
    if (this.config.type === 'doughnut') {
      this.renderDoughnut(ctx, data, canvas.width, canvas.height);
    } else if (this.config.type === 'bar') {
      this.renderBar(ctx, data, canvas.width, canvas.height);
    }
  }
  
  renderDoughnut(ctx, data, width, height) {
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = Math.min(width, height) / 3;
    
    let total = data.datasets[0].data.reduce((a, b) => a + b, 0);
    let currentAngle = -Math.PI / 2;
    
    data.datasets[0].data.forEach((value, i) => {
      const sliceAngle = (value / total) * 2 * Math.PI;
      
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
      ctx.arc(centerX, centerY, radius * 0.6, currentAngle + sliceAngle, currentAngle, true);
      ctx.closePath();
      
      ctx.fillStyle = data.datasets[0].backgroundColor[i] || '#' + Math.floor(Math.random()*16777215).toString(16);
      ctx.fill();
      
      currentAngle += sliceAngle;
    });
    
    // Legend
    data.labels.forEach((label, i) => {
      ctx.fillStyle = data.datasets[0].backgroundColor[i] || '#333';
      ctx.fillRect(10, 10 + i * 20, 15, 15);
      ctx.fillStyle = '#333';
      ctx.font = '12px Arial';
      ctx.fillText(label + ': ' + data.datasets[0].data[i], 30, 22 + i * 20);
    });
  }
  
  renderBar(ctx, data, width, height) {
    const margin = 40;
    const chartWidth = width - 2 * margin;
    const chartHeight = height - 2 * margin;
    const barWidth = chartWidth / data.labels.length * 0.8;
    const maxValue = Math.max(...data.datasets[0].data);
    
    // Draw bars
    data.datasets[0].data.forEach((value, i) => {
      const barHeight = (value / maxValue) * chartHeight;
      const x = margin + i * (chartWidth / data.labels.length) + (chartWidth / data.labels.length - barWidth) / 2;
      const y = height - margin - barHeight;
      
      ctx.fillStyle = data.datasets[0].backgroundColor[i] || '#4299e1';
      ctx.fillRect(x, y, barWidth, barHeight);
      
      // Label
      ctx.fillStyle = '#333';
      ctx.font = '10px Arial';
      ctx.save();
      ctx.translate(x + barWidth/2, height - margin + 15);
      ctx.rotate(-Math.PI/4);
      ctx.textAlign = 'right';
      ctx.fillText(data.labels[i], 0, 0);
      ctx.restore();
      
      // Value
      ctx.textAlign = 'center';
      ctx.fillText(value.toString(), x + barWidth/2, y - 5);
    });
  }
}

Chart.register = () => {};
Chart.defaults = {
  responsive: true,
  maintainAspectRatio: false
};

return Chart;
}));
