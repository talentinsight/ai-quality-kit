name: AI Quality Kit CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'infra/requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r infra/requirements.txt
    
    - name: Set up environment variables
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        ANTHROPIC_MODEL: ${{ secrets.ANTHROPIC_MODEL }}
        MODEL_NAME: ${{ vars.MODEL_NAME || 'gpt-4o-mini' }}
        PROVIDER: ${{ vars.PROVIDER || 'openai' }}
        RAG_TOP_K: ${{ vars.RAG_TOP_K || '4' }}
      run: |
        echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}" >> $GITHUB_ENV
        echo "ANTHROPIC_MODEL=${ANTHROPIC_MODEL:-claude-3-5-sonnet}" >> $GITHUB_ENV
        echo "MODEL_NAME=${MODEL_NAME:-gpt-4o-mini}" >> $GITHUB_ENV
        echo "PROVIDER=${PROVIDER:-openai}" >> $GITHUB_ENV
        echo "RAG_TOP_K=${RAG_TOP_K:-4}" >> $GITHUB_ENV
        echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
    
    - name: Validate configuration
      run: |
        if [ "$PROVIDER" = "openai" ] && [ -z "$OPENAI_API_KEY" ]; then
          echo "Error: OPENAI_API_KEY is required for OpenAI provider"
          exit 1
        fi
        if [ "$PROVIDER" = "anthropic" ] && [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "Error: ANTHROPIC_API_KEY is required for Anthropic provider"
          exit 1
        fi
        echo "Configuration validated for provider: $PROVIDER"
    
    - name: Run quality evaluation tests
      run: |
        echo "Running Ragas quality evaluation tests..."
        pytest evals/test_ragas_quality.py -v --tb=short
        if [ $? -ne 0 ]; then
          echo "Quality evaluation tests failed - blocking merge"
          exit 1
        fi
    
    - name: Run guardrails tests
      run: |
        echo "Running guardrails validation tests..."
        pytest guardrails/test_guardrails.py -v --tb=short
        if [ $? -ne 0 ]; then
          echo "Guardrails tests failed - blocking merge"
          exit 1
        fi
    
    - name: Run safety tests
      run: |
        echo "Running safety tests..."
        pytest safety/test_safety_basic.py -v --tb=short
        if [ $? -ne 0 ]; then
          echo "Safety tests failed - blocking merge"
          exit 1
        fi
    
    - name: Run all tests together
      run: |
        echo "Running all tests together for final validation..."
        pytest -q --tb=short
        if [ $? -ne 0 ]; then
          echo "Final test suite failed - quality gate not met"
          exit 1
        fi
        echo "All quality gates passed! âœ…"
    
    - name: Coverage gate
      if: always()
      run: |
        python - <<'PY'
        import json, os, sys
        with open('coverage.json','r') as f:
            data=json.load(f)
        pct = float(data.get('totals',{}).get('percent_covered', 0))
        min_req = float(os.getenv('COVERAGE_MIN_PERCENT', '0'))
        print(f"Coverage: {pct:.2f}% (min required: {min_req:.2f}%)")
        if pct < min_req:
            sys.exit(1)
        PY
      env:
        COVERAGE_MIN_PERCENT: "${{ vars.COVERAGE_MIN_PERCENT || '0' }}"
    
    - name: Test Docker build (if Dockerfile changed)
      if: contains(github.event.head_commit.modified, 'infra/dockerfile') || github.event_name == 'pull_request'
      run: |
        echo "Testing Docker build..."
        docker build -t ai-quality-kit-test -f infra/dockerfile .
        echo "Docker build successful"

  # Optional: Deploy staging environment on main branch
  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t ai-quality-kit:latest -f infra/dockerfile .
    
    - name: Log deployment
      run: |
        echo "Ready for deployment to staging environment"
        echo "Image: ai-quality-kit:latest"
        echo "Commit: ${{ github.sha }}"
